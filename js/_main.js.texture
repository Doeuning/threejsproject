import "../scss/common.scss";
import * as THREE from "three";
import webGL from "three/examples/jsm/capabilities/WebGL";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";

class App {
  constructor() {
    const scene = new THREE.Scene();
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    const app = document.getElementById("app");

    this._scene = scene;
    this._renderer = renderer;
    this._app = app;

    this._renderer.setPixelRatio(window.devicePixelRatio);
    this._renderer.setSize(window.innerWidth, window.innerHeight);
    this._app.appendChild(this._renderer.domElement);

    this._setupCamera();
    this._setupLight();
    this._setupModel();
    this._setupControls();

    window.onresize = this.resize.bind(this);
    this.resize();

    requestAnimationFrame(this.render.bind(this));

    // if (webGL.isWebGLAvailable()) {
    //   animate();
    // } else {
    //   const warning = webGL.getWebGLErrorMessage();
    //   document.getElementById("app").appendChild(warning);
    // }
  }

  _setupCamera() {
    const width = this._app.clientWidth;
    const height = this._app.clientHeight;
    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 100);
    // ddd
    camera.position.z = 3;
    this._camera = camera;
    this._scene.add(camera);
  }

  _setupLight() {
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);
    this._scene.add(ambientLight);

    const color = "#fff";
    const instensity = 1;
    const light = new THREE.DirectionalLight(color, instensity);
    light.position.set(-1, 2, 4);
    this._camera.add(light);
  }

  _setupModel() {
    const textureLoader = new THREE.TextureLoader();
    const map = textureLoader.load(
      "/images/glass/Glass_Window_002_basecolor.jpg"
    );
    const mapAO = textureLoader.load(
      "/images/glass/Glass_Window_002_ambientOcclusion.jpg"
    );
    const mapHeight = textureLoader.load(
      "/images/glass/Glass_Window_002_height.png"
    );
    const mapNormal = textureLoader.load(
      "/images/glass/Glass_Window_002_normal.jpg"
    );
    const mapRoughness = textureLoader.load(
      "/images/glass/Glass_Window_002_roughness.jpg"
    );
    const mapMetalic = textureLoader.load(
      "/images/glass/Glass_Window_002_metallic.jpg"
    );
    const mapAlpha = textureLoader.load(
      "/images/glass/Glass_Window_002_opacity.jpg"
    );

    const material = new THREE.MeshStandardMaterial({
      map: map,
      normalMap: mapNormal,
      displacementMap: mapHeight,
      displacementScale: 0.2,
      displacementBias: -0.15,
      aoMap: mapAO,
      aoMapIntensity: 2, // aoMap의 강도 지정. default: 1
      roughnessMap: mapRoughness,
      roughness: 0.5,
      metalnessMap: mapMetalic,
      metalness: 0.5,

      alphaMap: mapAlpha,
      transparent: true,
      side: THREE.DoubleSide,
    });
    const box = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1, 256, 256, 256),
      material
    );
    box.position.set(-1, 0, 0);
    box.geometry.attributes.uv2 = box.geometry.attributes.uv;
    this._scene.add(box);

    const sphere = new THREE.Mesh(
      new THREE.SphereGeometry(0.7, 512, 512),
      material
    );
    sphere.position.set(1, 0, 0);
    sphere.geometry.attributes.uv2 = sphere.geometry.attributes.uv;
    this._scene.add(sphere);

    // const vertices = [];
    // for (let i = 0; i < 1000; i++) {
    //   const x = THREE.Math.randFloatSpread(5);
    //   const y = THREE.Math.randFloatSpread(5);
    //   const z = THREE.Math.randFloatSpread(5);
    //
    //   vertices.push(x, y, z);
    // }
    //
    // const geometry = new THREE.BufferGeometry();
    // geometry.setAttribute(
    //   "position",
    //   new THREE.Float32BufferAttribute(vertices, 3) // vertices의 좌표가 3개라는 의미
    // );
    //
    // const sprite = new THREE.TextureLoader().load("/images/demogorgon.png"); // 포인트에 랜더링할 이미지
    //
    // const material = new THREE.PointsMaterial({
    //   map: sprite, // 이미지 랜더링
    //   alphaTest: 0.5, // 이미지의 픽셀값 중 알파값이 이 alphaTest값보다 클때만 픽셀이 랜더링 됨
    //   color: "#fff",
    //   size: 0.1,
    //   sizeAttenuation: true, // 사이즈를 통해 원근감을 나타낼지의 여부
    // });
    //
    // const points = new THREE.Points(geometry, material);
    // this._scene.add(points);
  }

  _setupControls() {
    new OrbitControls(this._camera, this._app);
  }

  resize() {
    const width = this._app.clientWidth;
    const height = this._app.clientHeight;

    this._camera.aspect = width / height;
    this._camera.updateProjectionMatrix();

    this._renderer.setSize(width, height);
  }

  render(time) {
    // time : 렌더링이 처음 시작된 이후 경과된 값으로 밀리세컨드
    this._renderer.render(this._scene, this._camera);
    this.update(time);
    requestAnimationFrame(this.render.bind(this));
  }

  update(time) {
    time *= 0.001;
  }
}

window.onload = () => {
  new App();
};
